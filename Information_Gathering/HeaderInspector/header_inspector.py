#!/usr/bin/env python3
"""
NAME: header_inspector.py
VERSION: 0.0.1
AUTHOR: Jesse Leverett (CyberThulhu)
STATUS: Building Initial code framework
DESCRIPTION:
TO-DO:
COPYRIGHT Â© 2021 Jesse Leverett
"""

# Imports
from _typeshed import Self
import sys
import ssl
import argparse
from socket import gethostbyname_ex
from urllib import request, error

# Added Variables
__author__ = "Jesse Leverett"
__copyright__ = "Copyright (C) 2021 Jesse Leverett"
__license__ = "MIT License"
__version__ = "1.0"

# Instantiate Argparser
PROG_DESCRIPTION = ""
PROG_EPILOG = ""
parser = argparse.ArgumentParser(description=PROG_DESCRIPTION, epilog=PROG_EPILOG,
                                formatter_class= argparse.RawDescriptionHelpFormatter)

# Add Arguments
OUTPUT_HELP_TEXT = ""
URL_HELP_TEXT = ""
URL_LIST_HELP_TEXT = ""
parser.add_argument('-o', '--output', metavar=r'C:\IP-List.txt', type=str,
                    required=False, help=OUTPUT_HELP_TEXT)
parser.add_argument('-u', '--url', metavar=r'http://url.com/', type=str,
                    required=True, help=URL_HELP_TEXT)
parser.add_argument('-uL', '--urllist', metavar=r'C:\IP-List.txt', type=str,
                    required=False, help=URL_LIST_HELP_TEXT)

# Parse Arguments
args = parser.parse_args()

# Created Classes
class HeaderInspector:
    """Header Inspector Class"""
    def __init__(self, website_url=None):
        self.website_url = website_url
    
    def test_connection(self, uri_url):
        """Test Connection to Website before Querying"""
        # Test connection to provided URL/URI
        try:
            with request.urlopen(uri_url, context=ctx) as status_code:
                successful_connect = status_code.getcode() == 200
                if successful_connect is True:
                    return "[+] TASK: Website is online! Proceeding..."
                print("[-] ERROR (HTML: 404): The website appears to not be up")
                sys.exit(1)
        except error.HTTPError as httperr:
            response_data = httperr.read().decode("utf-8", "ignore")
            print(f"[-] ERROR (HTTP Error): {response_data}")
            sys.exit(1)
        except error.URLError:
            print("[-] ERROR (WIN: 10061): Target actively refused connection.")
            sys.exit(1)

    def shorten_url(self):
        pass

ctx = ssl.create_default_context()
ctx.check_hostname = False
ctx.verify_mode = ssl.CERT_NONE

# Defined Functions


def main():
    """Main Code"""
    test_connection()
    request_url = request.urlopen(args.url, context=ctx)
    shorter_url = (args.url).split("/")[2]
    print(shorter_url)
    print(gethostbyname_ex(shorter_url))
    print(request_url.info())
    sys.exit(0)

# Main Code
if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        sys.exit(1)
