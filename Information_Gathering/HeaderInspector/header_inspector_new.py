#!/usr/bin/env python3
"""
NAME: header_inspector.py
VERSION: 0.0.2
AUTHOR: Jesse Leverett (CyberThulhu)
STATUS: Building Initial code framework
DESCRIPTION:
TO-DO:
    - Add help/description texts
    - Finish writing other functions
    - Build Main function and Order of Operations
COPYRIGHT Â© 2021 Jesse Leverett
"""

# Imports
import sys
import ssl
import argparse
from socket import gethostbyname
from urllib import request, error, response
from datetime import datetime

# Added Variables
__author__ = "Jesse Leverett"
__copyright__ = "Copyright (C) 2021 Jesse Leverett"
__license__ = "MIT License"
__version__ = "1.0"

# Instantiate Argparser
PROG_DESCRIPTION = ""
PROG_EPILOG = ""
parser = argparse.ArgumentParser(description = PROG_DESCRIPTION, epilog = PROG_EPILOG,
                                formatter_class= argparse.RawDescriptionHelpFormatter)
parser_url = parser.add_mutually_exclusive_group(required=True)

# Add Arguments
OUTPUT_HELP_TEXT = ""
URL_HELP_TEXT = ""
URL_LIST_HELP_TEXT = ""
VERBOSE_HELP_TEXT = ""

parser_url.add_argument('-u', '--url', metavar=r'http://url.com/', type=str,
                    required=True, help=URL_HELP_TEXT)
parser_url.add_argument('-l', '--urllist', metavar=r'C:\IP-List.txt', type=str,
                    required=False, help=URL_LIST_HELP_TEXT)
parser.add_argument('-o', '--output', metavar=r'C:\IP-List.txt', type=str,
                    required=False, help=OUTPUT_HELP_TEXT)
parser.add_argument('-v', '--verbose', default=False, type=bool,
                    required=False, action="store_true", help=VERBOSE_HELP_TEXT)

# Parse Arguments
args = parser.parse_args()

# Created Class
class URLObject:
    """ URL Object Class """
    def __init__(self, website_url):
        """ Initialization of URL Object Class """
        self.website_url = website_url
        self.cert_context = ssl.create_default_context()
        self.cert_context.check_hostname = False
        self.cert_context.verify_mode = ssl.CERT_NONE

    def url_ipaddr(self):
        """ Get URL's IP Address """
        shorter_ipaddr = (self.website_url).split("/")[2]
        return gethostbyname(shorter_ipaddr)

    def url_protocol(self):
        """ Verify if HTTP or HTTPS """
        pass

    def url_status_code(self):
        """ Verify 200 Connectivity """
        try:
            with request.urlopen(self.website_url, context = self.cert_context) as req:
                successful_connect = req.status == 200
                if successful_connect is True:
                    return "[+] SUCCESS: Website is Online"
                else:
                    return "[-] ERROR: Website is Offline"
        except error.HTTPError as httperr:
            response_data = httperr.read().decode("utf-8", "ignore")
            print(f"[-] ERROR: (HTTP ERR): {response_data}")
            sys.exit(1)
        except error.URLError as urlerr:
            print(f"[-] ERROR: (URL ERR): Target actively refused connection.")
            sys.exit(1)

    def url_response_headers(self):
        """ Get URL's Response Headers """
        try:
            with request.urlopen(self.website_url, context = self.cert_context) as req:
                return req.info()
        except error.HTTPError as httperr:
            response_data = httperr.read().decode("utf-8", "ignore")
            print(f"[-] ERROR: (HTTP ERR): {response_data}")
            sys.exit(1)
        except error.URLError as urlerr:
            print(f"[-] ERROR: (URL ERR): Target actively refused connection.")
            sys.exit(1)

    def url_specific_headers(self, specific_header_list, input_response_headers):
        """ Look for Specific Headers within Response """
        pass
        
# Created Definitions
def open_file(unopened_file = args.urllist):
    """ Open a File """
    opened_file_data = []
    with open(fr"{unopened_file}", "r", encoding="utf-8") as opened_file:
        for line in opened_file:
            opened_file_data.append(line.rstrip())
    return opened_file_data

def create_output():
    """ Design Output """
    pass

def write_file(result_data, output_file = args.output):
    """ Write to a File """
    if output_file is not None:
        with open(output_file, "a", encoding="utf-8") as opened_output_file:
            opened_output_file.write(result_data)
        return f"[!] INFO: Results written to {output_file}"
    return result_data
    

def main():
    """ Main Function """
    pass

if __name__ == "__main__":
    """ Main Prog """
    try:
        start_time = datetime.now()
        main()
        end_time = datetime.now()
        exec_time = end_time - start_time
        print(f"[!] INFO: Total execution time: {exec_time}")
        sys.exit(0)
    except KeyboardInterrupt:
        print("[-] KEY INTERRUPT: Program will now EXIT")
        sys.exit(1)