#!/usr/bin/env python3
"""
NAME: password_finder.py
VERSION: 0.0
AUTHOR: Jesse Leverett (CyberThulhu)
STATUS: Building Initial code framework
DESCRIPTION:
TO-DO: 
    [] Work on Mind Map
    [] Build Initial Code Framework
COPYRIGHT Â© 2021 Jesse Leverett
"""

# Imports
import sys
import argparse
from datetime import datetime

# Added Variables
__author__ = "Jesse Leverett"
__copyright__ = "Copyright (C) 2021 Jesse Leverett"
__license__ = "MIT License"
__version__ = "0.0"

# Instantiate Argparser
PROG_DESCRIPTION = ""
PROG_EPILOG = ""
parser = argparse.ArgumentParser(prog="password_finder", description = PROG_DESCRIPTION, epilog = PROG_EPILOG, formatter_class= argparse.RawDescriptionHelpFormatter)

# Instantiate SubParsers
sub_parser = parser.add_subparsers(description="", dest="passw_finder_mode")

# Add SubParsers
brute_force_parser = sub_parser.add_parser("bf", help="Brute Forcing Mode")
passw_spray_parser = sub_parser.add_parser("ps", help="Password Spraying Mode")

# Add Arguments
HELP_TEXT = ""
parser.add_argument('-v', '--verbose', dest="verbose", default=False, required=False, action="store_true", help=HELP_TEXT)
parser.add_argument('--version', required=False, action="version", version=" %(prog)s {__version__}".format(), help=HELP_TEXT)

# Brute Forcing Arguments
brute_force_parser.add_argument('-u', '--username', dest="bf_username", metavar='', type=str, default=False, required=False, action="store_true", help=HELP_TEXT)
brute_force_parser.add_argument('-p', '--passlist', dest="bf_passlist", metavar='', type=str, default=False, required=False, action="store_true", help=HELP_TEXT)

# Password Spraying Arguments
passw_spray_parser.add_argument('-u', '--userlist', dest="ps_userlist", metavar='', type=str, default=False, required=False, action="store_true", help=HELP_TEXT)
passw_spray_parser.add_argument('-p', '--password', dest="ps_password", metavar='', type=str, default=False, required=False, action="store_true", help=HELP_TEXT)

# Parse Arguments
args = parser.parse_args()

def verbosity_checker(verbose_text):
    """ Checks if the Verbose Argument is True then Returns Parameter"""
    if args.verbose is True:
        return verbose_text

def main():
    """ Main Code """
    return None

if __name__ == "__main__":
    try:
        start_time = datetime.now()
        main()
        close_time = datetime.now()
        total_time = close_time - start_time
        verbosity_checker(f"[!] INFO: Total Execution Time {total_time}")

    except KeyboardInterrupt:
        sys.exit(1)
else:
    sys.exit(1)
