#!/usr/bin/env python3 -tt
#-*- coding: UTF-8 -*-

"""
NAME: archive_extractor.py
VERSION: 0.0
AUTHOR: Jesse Leverett (CyberThulhu)
STATUS: Work In Progress
DESCRIPTION: Extracts Archived Data from Zipped Files
TO-DO:
    [ ] Build Initial Code Framework
    [ ] Build File Class
USAGE:
COPYRIGHT Â© 2021 Jesse Leverett
"""

# Standard Variables
__author__ = "Jesse Leverett"
__copyright__ = "Copyright (C) 2021 Jesse Leverett"
__license__ = "MIT License"
__version__ = "1.0"

# Imports
import os
import sys
import zipfile
import tarfile
try:
    import py7zr
except ImportError:
    print("'py7zr' is a required package")
    print("Install:")
    print("\npython3 -m pip install -r requirements.txt")
    print("\npython3 -m pip install py7zr")
    sys.exit(1)

class ArchivedFile:
    """ Archived File Object """
    def __init__(self, archived_file_path:str) -> None:
        self.archived_file_path = archived_file_path
        self.archived_file_name = os.path.basename(archived_file_path)
        
    def archive_abs_path(self):
        """ """
        return os.path.abspath()

    def archive_extn(self):
        """ Gets the Archive File Extension """
        return os.path.splitext(self.archived_file_name)

def unzip_archive(path_to_archive:str, path_to_extraction:str) -> None:
    """ Unzip .zip archive files """
    if path_to_archive.endswith('.zip'):
        opener, mode = zipfile.ZipFile, 'r'
    with opener(path_to_archive, mode) as archive:
        archive.extractall(path=path_to_extraction)

def unzip_tar_archive(path_to_archive:str, path_to_extraction:str) -> None:
    """ Unzip (.tar|.tar.gz|.tgz|.tar.bz2|.tbz) files """
    if path_to_archive.endswith(".tar"):
        opener, mode = tarfile.open, 'r'

    elif path_to_archive.endswith(".tar.gz") or path_to_archive.endswith(".tgz"):
        opener, mode = tarfile.open, 'r:gz'

    elif path_to_archive.endswith(".tar.bz2") or path_to_archive.endswith(".tbz"):
        opener, mode = tarfile.open, 'r:bz2'

    with opener(path_to_archive, mode) as archive:
        archive.extractall(path=path_to_extraction)