#!/usr/bin/env python3 -tt
#-*- coding: UTF-8 -*-

"""
NAME: password_pilfer.py
VERSION: 1.0
AUTHOR: Jesse Leverett (CyberThulhu)
STATUS: Work In Progress
DESCRIPTION: Analyzes Filesystem/Files for Sensitive Data
TO-DO:
    [ ] Build Initial Code Framework
    [ ] Build File Class
COPYRIGHT Â© 2021 Jesse Leverett
"""

# Standard Variables
__author__ = "Jesse Leverett"
__copyright__ = "Copyright (C) 2021 Jesse Leverett"
__license__ = "MIT License"
__version__ = "1.0"

# Banner
def display_banner():
    """ Returns Banner """
    return ('''
                                            _           _ _  __
                                           | |         (_) |/ _|
  _ __   __ _ ___ _____      _____  _ __ __| |    _ __  _| | |_ ___ _ __
 | '_ \ / _` / __/ __\ \ /\ / / _ \| '__/ _` |   | '_ \| | |  _/ _ \ '__|
 | |_) | (_| \__ \__ \\\\ V  V / (_) | | | (_| |   | |_) | | | ||  __/ |
 | .__/ \__,_|___/___/ \_/\_/ \___/|_|  \__,_|   | .__/|_|_|_| \___|_|
 | |                                       ______| |
 |_|                                      |______|_|
    ''')

# Imports
import os
import re
import sys
import time
import logging
import argparse
from datetime import datetime
try:
    import yaml
except ImportError:
    print("[-] ERROR: 'PyYAML' is a required package to run this program")
    sys.exit(1)
try:
    from colorama import init, Fore, Back, Style
    init()
except ImportError:
    print("[-] ERROR: 'colorama' is a required package to run this program")
    sys.exit(1)

# Instantiate Argparser
PROG_DESCRIPTION = "Analyzes Filesystem/Files for Sensitive Data"
PROG_EPILOG = f"{__copyright__}"

parser = argparse.ArgumentParser( prog="password_pilfer",
                                description=PROG_DESCRIPTION,
                                epilog=PROG_EPILOG,
                                formatter_class= argparse.RawDescriptionHelpFormatter)

# Add Arguments
OUTP_HELP_TEXT = ""
VERS_HELP_TEXT = ""
LCLP_HELP_TEXT = ""

parser.add_argument('-o', dest="outpt_file", default=False, action="store_true", required=False, help=OUTP_HELP_TEXT)
parser.add_argument('-p', dest="local_path", metavar='Path to File/Dir', type=str, required=True, help=LCLP_HELP_TEXT)
parser.add_argument('--version', action="version", version=f" %(prog)s {__version__}", help=VERS_HELP_TEXT)

# Parse Arguments
pargs = parser.parse_args()

# Pull Configurations
CONFIG_FILE = yaml.safe_load(open('config.yaml'))
OUTPUT_FILE = CONFIG_FILE['output_file']
ERRORL_FILE = CONFIG_FILE['errorl_file']
BASE64_CHARS = CONFIG_FILE['base64_chars']
MIN_KEY_LEN = CONFIG_FILE['min_key_length']
MAX_KEY_LEN = CONFIG_FILE['max_key_length']
MIN_PASS_LEN = CONFIG_FILE['min_pass_length']
MAX_PASS_LEN = CONFIG_FILE['max_pass_length']
PASSWORD_COMPLEXITY = CONFIG_FILE['password_complexity']
EXCLUDED_FILES = CONFIG_FILE['excluded_files']
ARCHIVE_FILES = CONFIG_FILE['archive_files']
DATABASE_FILES = CONFIG_FILE['database_files']
PASSWORD_REGEX = re.compile(r"['\">](.*?)['\"<]")

# Instantiate Logger
logging.basicConfig(filename=ERRORL_FILE, level=logging.DEBUG,
                    format='%(asctime)s %(levelname)s %(name)s %(message)s')
logger = logging.getLogger(__name__)

class FileObject:
    """ Instantiates File Object """
    def __init__(self) -> None:
        pass

def run():
    """ Runs a Program """
    pass

def main():
    """ Main Code """
    try:
        print(Fore.MAGENTA + display_banner() + Fore.RESET)
        time.sleep(10)
    except KeyboardInterrupt:
        print(Fore.RED + f"[!] SYSTEM: Keyboard Interrupt - Exiting Program" + Fore.RESET)

if __name__ == "__main__":
    try:
        start_time = datetime.now()
        main()
        end_time = datetime.now()
        exec_time = end_time - start_time
        print(f"[!] INFO: Total execution time for the function {exec_time}")
        sys.exit(0)

    except KeyboardInterrupt:
        print("[-] KEY INTERRUPT: Program will now EXIT!")
        sys.exit(0)
